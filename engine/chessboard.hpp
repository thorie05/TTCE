#include <string>
#include <stack>
#include <tuple>
#include <vector>
#include <iostream>
#include <array>
#include <unordered_map>

typedef unsigned long long U64;
typedef unsigned short U16;

const std::string DEFAULT_FEN = 
    "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

// constants for encoding pieces in bitboards and mailbox array
const int WHITE_PAWN = 0;
const int WHITE_KNIGHT = 1;
const int WHITE_BISHOP = 2;
const int WHITE_ROOK = 3;
const int WHITE_QUEEN = 4;
const int WHITE_KING = 5;
const int BLACK_PAWN = 6;
const int BLACK_KNIGHT = 7;
const int BLACK_BISHOP = 8;
const int BLACK_ROOK = 9;
const int BLACK_QUEEN = 10;
const int BLACK_KING = 11;

const int WHITE_PIECES = 12;
const int BLACK_PIECES = 13;
const int PIECES = 14;

const int EMPTY_SQUARE = 15;

struct Board {
    // struct representing board position

    std::array<U16, 64> mailbox;
    std::array<U64, 16> bitboards{}; // index 15 redundant

    bool turn;

    // castling rights
    bool whiteCastleKingside;
    bool whiteCastleQueenside;
    bool blackCastleKingside;
    bool blackCastleQueenside;

    U16 enPassantSquare;
    U16 halfmoveClock;
    U16 turnNumber;
};

class Chessboard {
    private:
        std::string inputFen;
        Board board;
        std::stack<Board> history;
        //std::array<std::unordered_map<U64,U64>,64> magicsRook;
        std::vector<std::vector<U64>> magicsRook;
        std::array<U64,64> rookMask = {};
        std::array<U64,64> rookShifts = {14, 13, 14, 14, 14, 14, 13, 14, 14, 12, 13, 11, 11, 13, 12, 13, 13, 12, 12, 13, 13, 12, 13, 13, 12, 12, 14, 13, 12, 11, 12, 13, 13, 11, 13, 13, 13, 12, 12, 13, 12, 12, 13, 12, 12, 12, 12, 14, 13, 12, 13, 13, 13, 13, 12, 12, 16, 14, 15, 13, 13, 16, 14, 16};
        std::array<U64,64> rookMagics = {2918473304614633480ULL, 2900318297466601988ULL, 37155800732573706ULL, 4802769869472768ULL, 153439074597208066ULL, 437414862721679425ULL, 108087499699519936ULL, 9263909175146057992ULL, 2022126175609946272ULL, 595192583223775488ULL, 563087392719744ULL, 9871960786568610816ULL, 2306546705281585793ULL, 20859934761943073ULL, 432934937981616512ULL, 9225659021321575552ULL, 4625267254775285776ULL, 4685155660411772928ULL, 27022765999783944ULL, 6922033348831346944ULL, 3459046023159121152ULL, 297835744637091848ULL, 288301878835421824ULL, 2595225690756382738ULL, 140823523065856ULL, 18084837594317888ULL, 294282123081171731ULL, 633328363376641ULL, 6342513102478772224ULL, 9148084919730251ULL, 9044587481940104ULL, 1266929793238080ULL, 35219839193600ULL, 39582691229760ULL, 10520455753544771588ULL, 37437297186046984ULL, 1734026613405812768ULL, 1157568079442481154ULL, 2946217272932319744ULL, 8934069896256ULL, 9297681705585430529ULL, 4650037057564999688ULL, 9700833329537876229ULL, 2031123466311443456ULL, 38320193344115360ULL, 1261028240924115008ULL, 9223389635485370880ULL, 2402438275402146ULL, 17592329707652ULL, 148699052320505920ULL, 6755416621450760ULL, 1765974020794089780ULL, 3467842155035377666ULL, 9223664511244044864ULL, 38280881642701832ULL, 11530622700126994816ULL, 4758088259494494209ULL, 1585309130658178310ULL, 1161928978806648833ULL, 5774626685371548418ULL, 288793328270050322ULL, 563053041090570ULL, 2614480939663229060ULL, 576495971907764226ULL};

    public:
        Chessboard(const std::string& fen);

        std::tuple<std::vector<std::vector<char>>, char, bool, bool, bool, bool,
            std::tuple<int,int>, int, int> getStatus();

        void pushMove(U16 move);

        void pushMove(std::tuple<int,int> startSquare, 
            std::tuple<int,int> endSquare, char promotion);

        std::vector<U16> getPseudoLegalMoves();

        std::vector<std::tuple<std::tuple<int, int>, std::tuple<int, int>, 
            char>> getPseudoLegalMovesPy();
};
